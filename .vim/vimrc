" === options ==================================================================

source $HOME/.vim/defaults.vim " sensible defaults
set nomodeline " security measure
set shell=bash

" unicode
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8

" ui
set number relativenumber  " relative line numbers
set hlsearch  " highlight matches when searching
set showmatch  " highlight matching [{()}]
set fillchars=""  " remove splits seperators

" word wrapping
set wrap linebreak nolist
set tw=79
set formatoptions=bctloq
set showbreak=↪\ \

" clipboard
set clipboard^=unnamed,unnamedplus

" temporary files
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//


" --- tabs/indent -------------------------------------------------------------

" general
set expandtab  " tabs are spaces
set softtabstop=4  " number of spaces in tab when editing
set tabstop=4  " number of visual spaces per TAB

" makefiles
autocmd FileType make setlocal noexpandtab

" js/html/css
au BufNewFile,BufRead *.js, *.html, *.css
    \ set expandtab
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2


" --- remap keys/mouse --------------------------------------------------------

" leader keys
let g:mapleader = "\<Space>"
let g:maplocalleader = ','

" disable arrow keys bindings
"noremap <Up> <Nop>
"noremap <Down> <Nop>
"noremap <Left> <Nop>
"noremap <Right> <Nop>

" colon/semicolon
nmap ; :
noremap ;; ;

" redo
noremap U <C-R>

" loalleader-d is for delete without buffer
nnoremap <localleader>d "_d
nnoremap <localleader>D "_D
vnoremap <localleader>d "_d

" scroll wheel single lines
"map <ScrollWheelUp> <C-Y>
"map <ScrollWheelDown> <C-E>

map <S-Left> ^
map <S-Down> }
map <S-Up> {
map <S-Right> $
map <S-h> ^
map <S-j> }
map <S-k> {
map <S-l> $

" --- colors ------------------------------------------------------------------

colorscheme custom
" exec "source " . expand('<sfile>:p:h') . "/colors/custom.vim"


" --- column limit ------------------------------------------------------------

augroup columnLimit
  autocmd!
  autocmd BufEnter,WinEnter,FileType python
        \ highlight ColumnLimit ctermbg=DarkGrey
  let columnLimit = 80 " feel free to customize
  let pattern =
        \ '\%<' . (columnLimit+1) . 'v.\%>' . columnLimit . 'v'
  autocmd BufEnter,WinEnter,FileType python
        \ let w:m1=matchadd('ColumnLimit', pattern, -1)
augroup END


" --- vim-plug ----------------------------------------------------------------

" install vim-plug
" :PlugInstall to install plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" config for vim-plug
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/preservim/nerdtree'
Plug 'https://github.com/preservim/nerdcommenter'
Plug 'https://github.com/dense-analysis/ale'
Plug 'https://github.com/AndrewRadev/splitjoin.vim'
Plug 'https://github.com/airblade/vim-gitgutter'
Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/mileszs/ack.vim'
Plug 'https://github.com/junegunn/vim-easy-align'
Plug 'https://github.com/jeffkreeftmeijer/vim-numbertoggle'
Plug 'https://github.com/hecal3/vim-leader-guide'
Plug 'https://github.com/mg979/vim-visual-multi'
Plug 'https://github.com/frazrepo/vim-rainbow'
Plug 'https://github.com/vimwiki/vimwiki'
Plug 'https://github.com/maralla/completor.vim'
Plug 'https://github.com/zhou13/vim-easyescape'
Plug 'https://github.com/alok/notational-fzf-vim'
Plug 'https://github.com/matze/vim-move'
Plug 'https://github.com/airblade/vim-rooter'
Plug 'https://github.com/Yggdroot/indentLine'
Plug 'https://github.com/francoiscabrol/ranger.vim'
Plug 'https://github.com/rbgrouleff/bclose.vim'

call plug#end()


" --- vim-leader-guide---------------------------------------------------------

set timeoutlen=500

call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>

hi LeaderGuideDesc ctermfg=5

let g:lmap = {}

let g:lmap.f = {
    \'name' : '+file',
    \'l' : ['e #', 'file edit last'],
    \'t' : ['NERDTreeToggle', 'file tree'],
    \'r' : ['Ranger', 'file ranger'],
    \'s' : ['Files',  'file search'],
    \'w' : [':w',  'file write'],
    \}

let g:lmap.g = {
    \'name' : '+git',
    \'s' : ['Gstatus', 'git status'],
    \'p' : ['Gpull',   'git pull'],
    \'u' : ['Gpush',   'git push'],
    \'c' : ['Gcommit', 'git commit'],
    \'w' : ['Gwrite',  'git write'],
    \}

let g:lmap.j = {
    \'name' : '+journal',
    \'t' : ['VimwikiMakeDiaryNote', 'journal today'],
    \'y' : ['VimwikiMakeYesterdayDiaryNote', 'journal yesterday'],
    \'w' : ['VimwikiMakeTomorrowDiaryNote', 'journal tomorrow'],
    \}

let g:lmap.t = {
    \'name' : '+todo',
    \'s'    : ['e ~/notes/todo/sbibm.md', 'sbibm'],
    \}

let g:lmap.v = {
    \'name' : '+vim',
    \'d' : ['set background=dark', 'vim background dark'],
    \'c' : ['e ~/.vim/vimrc', 'vim edit config'],
    \'l' : ['set background=light', 'vim background light'],
    \'r' : ['source $MYVIMRC', 'vim reload config'],
    \}

let g:lmap.w = {
    \'name' : '+wiki',
    \'s' : ['NV', 'wiki search'],
    \}


" --- NERDTree ----------------------------------------------------------------

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree


" --- vim-rainbow -------------------------------------------------------------

let g:rainbow_active = 1


" --- completor.vim -----------------------------------------------------------

" Use TAB to complete when typing words, else inserts TABs as usual.  Uses
" dictionary, source files, and completor to find matching words to complete.

" Note: usual completion is on <C-n> but more trouble to press all the time.
" Never type the same word twice and maybe learn a new spellings!
" Use the Linux dictionary when spelling is in doubt.
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^[[:keyword:][:ident:]]'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction

" Use `tab` key to select completions.  Default is arrow keys.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab to trigger auto completion.  Default suggests completions as you type.
let g:completor_auto_trigger = 0
inoremap <expr> <Tab> Tab_Or_Complete()

" Complete Options (completeopt)
let g:completor_complete_options = 'menuone,preview'

"noremap <silent> <leader>d :call completor#do('definition')<CR>
"noremap <silent> <leader>c :call completor#do('doc')<CR>
"noremap <silent> <leader>f :call completor#do('format')<CR>
"noremap <silent> <leader>s :call completor#do('hover')<CR>


" --- ALE ---------------------------------------------------------------------

let g:ale_change_sign_column_color = 1
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
hi link ALEErrorSign    Error
hi link ALEWarningSign  Warning
autocmd VimEnter * :highlight! ALESignColumnWithErrors ctermfg=0 ctermbg=NONE
autocmd VimEnter * :highlight! ALESignColumnWithoutErrors ctermfg=0 ctermbg=NONE
autocmd VimEnter * :highlight! ALEErrorSign ctermfg=9 ctermbg=NONE
autocmd VimEnter * :highlight! ALEWarningSign ctermfg=11 ctermbg=NONE
autocmd VimEnter * :highlight! ALEInfoSign   ctermfg=14 ctermbg=NONE
autocmd VimEnter * :highlight! ALEError ctermfg=9 ctermbg=NONE
autocmd VimEnter * :highlight! ALEWarning ctermfg=11 ctermbg=NONE
autocmd VimEnter * :highlight! ALEInfo   ctermfg=14 ctermbg=NONE


" --- easyescape --------------------------------------------------------------

" exit insert mode through pressing jj twice
let g:easyescape_chars = { "j": 2 }
let g:easyescape_timeout = 500
cnoremap jj <ESC>


" --- NV ----------------------------------------------------------------------

let g:nv_search_paths = ['~/notes']


" --- vim-wiki -------------------------------------------------------------

let g:vimwiki_list = [{'path': '~/notes/',
                      \ 'syntax': 'markdown',
                      \'ext': '.md',
                      \'auto_diary_index': 1,
                      \}]


" --- vim-move -------------------------------------------------------------

let g:move_key_modifier = 'C' " shift as modifier


" --- vim-rooter -----------------------------------------------------------

let g:rooter_change_directory_for_non_project_files = 'home'
let g:rooter_patterns = ['.git', 'Makefile'] 
let g:rooter_silent_chdir = 1


" --- status line ----------------------------------------------------------

let laststatus=0


" --- indent line ----------------------------------------------------------

"let g:indentLine_leadingSpaceChar='·'
"let g:indentLine_leadingSpaceEnabled='1'


" --- ranger ---------------------------------------------------------------

let g:ranger_map_keys = 0

